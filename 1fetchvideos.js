const { Client } = require('@notionhq/client');
require('dotenv').config();
const fs = require('fs');

// Inicializar cliente Notion
const notion = new Client({
    auth: process.env.NOTION_TOKEN,
});

/**
 * Valida se todas as vari√°veis necess√°rias est√£o configuradas
 */
function validateEnvironmentVariables() {
    const required = [
        'NOTION_TOKEN',
        'NOTION_DATABASE_ID'
    ];
    
    const missing = required.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
        throw new Error(`‚ùå Vari√°veis de ambiente faltando: ${missing.join(', ')}`);
    }
    
    console.log('‚úÖ Vari√°veis Notion validadas');
}

/**
 * Extrai texto simples de propriedades rich_text do Notion
 * @param {Array} richTextArray - Array de objetos rich_text
 * @returns {string} - Texto simples
 */
function extractPlainText(richTextArray) {
    if (!richTextArray || !Array.isArray(richTextArray)) {
        return '';
    }
    
    return richTextArray
        .map(item => item.plain_text || '')
        .join('')
        .trim();
}

/**
 * Extrai t√≠tulo de propriedades title do Notion
 * @param {Array} titleArray - Array de objetos title
 * @returns {string} - T√≠tulo simples
 */
function extractTitle(titleArray) {
    if (!titleArray || !Array.isArray(titleArray)) {
        return '';
    }
    
    return titleArray
        .map(item => item.plain_text || '')
        .join('')
        .trim();
}

/**
 * Processa propriedades da p√°gina do Notion
 * @param {Object} page - P√°gina do Notion
 * @returns {Object} - Dados processados do v√≠deo
 */
function processVideoData(page) {
    try {
        console.log(`üìÑ Processando p√°gina: ${page.id}`);
        
        const properties = page.properties;
        
        // Extrair dados b√°sicos
        const videoData = {
            pageId: page.id,
            title: extractTitle(properties['Video Title']?.title),
            description: extractPlainText(properties['Video Description']?.rich_text),
            driveLink: properties['Drive Link']?.url || '',
            tags: extractPlainText(properties['Tags']?.rich_text),
            category: properties['Category']?.select?.name || 'Education',
            privacy: properties['Privacy']?.select?.name || 'Public',
            uploadStatus: properties['Upload Status']?.select?.name || 'Pending',
            createdAt: page.created_time,
            lastEdited: page.last_edited_time
        };
        
        // Valida√ß√µes b√°sicas
        const validations = [];
        
        if (!videoData.title) {
            validations.push('‚ùå T√≠tulo n√£o pode estar vazio');
        }
        
        if (videoData.title.length > 100) {
            validations.push('‚ö†Ô∏è T√≠tulo muito longo (ser√° truncado)');
            videoData.title = videoData.title.substring(0, 100);
        }
        
        if (!videoData.driveLink) {
            validations.push('‚ùå Link do Drive √© obrigat√≥rio');
        }
        
        if (videoData.driveLink && !videoData.driveLink.includes('drive.google.com')) {
            validations.push('‚ö†Ô∏è Link n√£o parece ser do Google Drive');
        }
        
        if (videoData.description.length > 4500) {
            validations.push('‚ö†Ô∏è Descri√ß√£o muito longa (ser√° truncada)');
            videoData.description = videoData.description.substring(0, 4500);
        }
        
        // Log dos dados extra√≠dos
        console.log(`   üì∫ T√≠tulo: ${videoData.title}`);
        console.log(`   üîó Drive: ${videoData.driveLink ? 'Presente' : 'Ausente'}`);
        console.log(`   üìù Descri√ß√£o: ${videoData.description.length} chars`);
        console.log(`   üè∑Ô∏è Tags: ${videoData.tags || 'Nenhuma'}`);
        console.log(`   üìÇ Categoria: ${videoData.category}`);
        console.log(`   üîí Privacidade: ${videoData.privacy}`);
        console.log(`   üìä Status: ${videoData.uploadStatus}`);
        
        // Log das valida√ß√µes
        if (validations.length > 0) {
            console.log('‚ö†Ô∏è Avisos de valida√ß√£o:');
            validations.forEach(validation => console.log(`   ${validation}`));
        }
        
        // Retornar dados e valida√ß√µes
        return {
            ...videoData,
            isValid: !validations.some(v => v.includes('‚ùå')),
            validations: validations
        };
        
    } catch (error) {
        console.error(`‚ùå Erro ao processar p√°gina ${page.id}:`, error.message);
        throw error;
    }
}

/**
 * Busca v√≠deos pendentes no Notion
 * @param {number} limit - N√∫mero m√°ximo de v√≠deos para buscar
 * @returns {Array} - Lista de v√≠deos pendentes
 */
async function fetchPendingVideos(limit = 10) {
    try {
        console.log('üîç Buscando v√≠deos pendentes no Notion...');
        
        validateEnvironmentVariables();
        
        // Construir filtro para buscar apenas v√≠deos pendentes
        const filter = {
            property: 'Upload Status',
            select: {
                equals: 'Pending'
            }
        };
        
        // Ordenar por data de cria√ß√£o (mais antigos primeiro)
        const sorts = [
            {
                property: 'Video Title',
                direction: 'ascending'
            }
        ];
        
        console.log(`üìä Buscando at√© ${limit} v√≠deo(s) pendente(s)...`);
        
        // Fazer consulta ao banco de dados
        const response = await notion.databases.query({
            database_id: process.env.NOTION_DATABASE_ID,
            filter: filter,
            sorts: sorts,
            page_size: Math.min(limit, 100) // M√°ximo do Notion: 100
        });
        
        console.log(`üìã Encontrados ${response.results.length} resultado(s)`);
        
        if (response.results.length === 0) {
            console.log('‚úÖ Nenhum v√≠deo pendente encontrado');
            return [];
        }
        
        // Processar cada p√°gina encontrada
        const videos = [];
        const errors = [];
        
        for (const page of response.results) {
            try {
                const videoData = processVideoData(page);
                
                if (videoData.isValid) {
                    videos.push(videoData);
                    console.log(`‚úÖ V√≠deo v√°lido adicionado: "${videoData.title}"`);
                } else {
                    errors.push({
                        pageId: page.id,
                        title: videoData.title || 'Sem t√≠tulo',
                        errors: videoData.validations.filter(v => v.includes('‚ùå'))
                    });
                    console.log(`‚ùå V√≠deo inv√°lido ignorado: "${videoData.title}"`);
                }
                
            } catch (processError) {
                console.error(`‚ùå Erro ao processar v√≠deo:`, processError.message);
                errors.push({
                    pageId: page.id,
                    title: 'Erro no processamento',
                    errors: [processError.message]
                });
            }
        }
        
        // Log do resultado final
        console.log('üìä Resultado da busca:');
        console.log(`   ‚úÖ V√≠deos v√°lidos: ${videos.length}`);
        console.log(`   ‚ùå V√≠deos com erro: ${errors.length}`);
        
        if (errors.length > 0) {
            console.log('‚ùå Erros encontrados:');
            errors.forEach(error => {
                console.log(`   üìÑ ${error.title}:`);
                error.errors.forEach(err => console.log(`      ${err}`));
            });
        }
        
        return videos;
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar v√≠deos pendentes:', error.message);
        throw error;
    }
}

/**
 * Busca um v√≠deo espec√≠fico por ID
 * @param {string} pageId - ID da p√°gina no Notion
 * @returns {Object} - Dados do v√≠deo
 */
async function fetchVideoById(pageId) {
    try {
        console.log(`üîç Buscando v√≠deo espec√≠fico: ${pageId}`);
        
        validateEnvironmentVariables();
        
        // Buscar p√°gina espec√≠fica
        const page = await notion.pages.retrieve({
            page_id: pageId
        });
        
        if (!page) {
            throw new Error('‚ùå P√°gina n√£o encontrada');
        }
        
        // Processar dados da p√°gina
        const videoData = processVideoData(page);
        
        console.log(`‚úÖ V√≠deo encontrado: "${videoData.title}"`);
        
        return videoData;
        
    } catch (error) {
        console.error(`‚ùå Erro ao buscar v√≠deo ${pageId}:`, error.message);
        throw error;
    }
}

/**
 * Obt√©m pr√≥ximo v√≠deo para upload (prioridade mais alta)
 * @returns {Object|null} - Pr√≥ximo v√≠deo ou null se n√£o houver
 */
async function getNextVideoForUpload() {
    try {
        console.log('üéØ Buscando pr√≥ximo v√≠deo para upload...');
        
        // Buscar apenas 1 v√≠deo
        const videos = await fetchPendingVideos(1);
        
        if (videos.length === 0) {
            console.log('üì≠ Nenhum v√≠deo pendente para upload');
            return null;
        }
        
        const nextVideo = videos[0];
        console.log(`üé¨ Pr√≥ximo v√≠deo: "${nextVideo.title}"`);
        
        return nextVideo;
        
    } catch (error) {
        console.error('‚ùå Erro ao obter pr√≥ximo v√≠deo:', error.message);
        throw error;
    }
}

/**
 * Verifica status geral do banco de dados
 * @returns {Object} - Estat√≠sticas do banco
 */
async function checkDatabaseStatus() {
    try {
        console.log('üìä Verificando status do banco de dados...');
        
        validateEnvironmentVariables();
        
        // Buscar informa√ß√µes do banco
        const database = await notion.databases.retrieve({
            database_id: process.env.NOTION_DATABASE_ID
        });
        
        console.log(`üìã Banco: ${database.title?.[0]?.plain_text || 'Auto Publisher'}`);
        console.log(`üìÖ √öltima edi√ß√£o: ${new Date(database.last_edited_time).toLocaleString('pt-BR')}`);
        
        // Buscar estat√≠sticas de p√°ginas
        const allPages = await notion.databases.query({
            database_id: process.env.NOTION_DATABASE_ID,
            page_size: 100
        });
        
        // Contar por status
        const stats = {
            total: allPages.results.length,
            pending: 0,
            uploaded: 0,
            error: 0
        };
        
        allPages.results.forEach(page => {
            const status = page.properties['Upload Status']?.select?.name || 'Pending';
            switch (status) {
                case 'Pending':
                    stats.pending++;
                    break;
                case 'Uploaded':
                    stats.uploaded++;
                    break;
                case 'Error':
                    stats.error++;
                    break;
            }
        });
        
        console.log('üìà Estat√≠sticas:');
        console.log(`   üìä Total: ${stats.total} v√≠deo(s)`);
        console.log(`   ‚è≥ Pendentes: ${stats.pending} v√≠deo(s)`);
        console.log(`   ‚úÖ Enviados: ${stats.uploaded} v√≠deo(s)`);
        console.log(`   ‚ùå Erros: ${stats.error} v√≠deo(s)`);
        
        return {
            database: {
                id: database.id,
                title: database.title?.[0]?.plain_text,
                lastEdited: database.last_edited_time
            },
            stats: stats
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar status:', error.message);
        throw error;
    }
}

/**
 * Fun√ß√£o principal - busca pr√≥ximo v√≠deo para processar
 * @returns {Object|null} - V√≠deo para processar ou null
 */
async function main() {
    try {
        console.log('üöÄ INICIANDO BUSCA DE V√çDEOS PENDENTES...');
        console.log('‚ïê'.repeat(50));
        
        // Verificar status do banco
        const status = await checkDatabaseStatus();
        
        if (status.stats.pending === 0) {
            console.log('üì≠ Nenhum v√≠deo pendente encontrado');
            console.log('‚úÖ Processo finalizado - nada para fazer');
            return null;
        }
        
        // Buscar pr√≥ximo v√≠deo
        const nextVideo = await getNextVideoForUpload();
        
        if (nextVideo) {
            // üíæ SALVAR DADOS TEMPOR√ÅRIOS
            const videoData = {
                pageId: nextVideo.pageId,
                title: nextVideo.title,
                driveUrl: nextVideo.driveUrl,
                description: nextVideo.description,
                tags: nextVideo.tags,
                category: nextVideo.category,
                privacy: nextVideo.privacy
            };
            
            fs.writeFileSync('temp_video_data.json', JSON.stringify(videoData, null, 2));
            console.log(`üíæ Dados salvos em temp_video_data.json para: ${videoData.title}`);
        }
        
        console.log('‚ïê'.repeat(50));
        console.log('‚úÖ BUSCA CONCLU√çDA COM SUCESSO!');
        console.log(`üé¨ V√≠deo selecionado: "${nextVideo.title}"`);
        console.log(`üìÑ ID da p√°gina: ${nextVideo.pageId}`);
        
        return nextVideo;
        
    } catch (error) {
        console.error('‚ïê'.repeat(50));
        console.error('‚ùå ERRO NA BUSCA DE V√çDEOS:');
        console.error(error.message);
        console.error('‚ïê'.repeat(50));
        throw error;
    }
}



// Executar se chamado diretamente
if (require.main === module) {
    main()
        .then(video => {
            if (video) {
                console.log('üéØ V√≠deo encontrado:', video.title);
                process.exit(0);
            } else {
                console.log('üì≠ Nenhum v√≠deo pendente');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('üí• Erro fatal:', error.message);
            process.exit(1);
        });
}



module.exports = {
    main,
    fetchPendingVideos,
    fetchVideoById,
    getNextVideoForUpload,
    checkDatabaseStatus,
    processVideoData
};


/*
üéØ PRINCIPAIS FUNCIONALIDADES:
üîç BUSCA INTELIGENTE:
Filtra apenas v√≠deos pendentes no Notion
Ordena por data (mais antigos primeiro)
Valida dados antes de retornar
Limite configur√°vel de resultados
üìä VALIDA√á√ïES COMPLETAS:
‚úÖ T√≠tulo obrigat√≥rio e tamanho
‚úÖ Link do Drive v√°lido
‚úÖ Descri√ß√£o dentro do limite
‚úÖ Tags formatadas corretamente
üõ°Ô∏è TRATAMENTO DE ERROS:
‚úÖ V√≠deos inv√°lidos s√£o ignorados
‚úÖ Logs detalhados de problemas
‚úÖ Estat√≠sticas de sucesso/erro
‚úÖ Fallbacks para dados ausentes
üìà ESTAT√çSTICAS:
‚úÖ Status geral do banco
‚úÖ Contagem por status
‚úÖ Informa√ß√µes de √∫ltima edi√ß√£o
‚úÖ Total de v√≠deos
*/